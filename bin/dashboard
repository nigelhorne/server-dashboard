#!/usr/bin/env perl

# TODO: Remove the inline icons - I don't like UTF-8 in source code like this
# TODO: The icons should be configurable

# Uses Parallel::ForkManager to send requests in parallel

use strict;
use warnings;

use utf8;	# Needed for &ShortUpArrow; and &ShortDownArrow;
use feature 'state';

my @needfull;	# Tracks required modules to be installed

# Install Pre-requisites
BEGIN {
	my @modules = (
		'Config::Abstraction',
		'Log::Abstraction',
		'File::Basename',
		'HTML::Entities',
		'HTML::TreeBuilder::XPath',
		'LWP::ConnCache',
		'LWP::UserAgent',
		'Mojolicious::Lite',
		'Parallel::ForkManager',
		'URI',
	);
	# Attempt to load each module and track missing ones
	foreach my $module(@modules) {
		eval "use $module";
		if($@) {
			# Install module dependencies
			if($module =~ /(.+)\s/) {
				# Specific version not satisfied
				push @needfull, $1;
			} else {
				push @needfull, $module;
			}
		}
	}
	# Attempt to load each module and track missing ones
	if(scalar(@needfull)) {
		my $list = join(' ', @needfull);
		if($ENV{'BOOTSTRAP'}) {
			print "Installing $list\n";
			$ENV{'PERL_MM_USE_DEFAULT'} = 1;
			# system("cpan -i $list");
			system('perl -MCPAN -e \'CPAN::Shell->install("' . join('", "', @needfull) . '")\'');
		} else {
			die "You need the following modules: $list";
		}
	}
}

# Retry loading missing modules after installation
foreach my $module (@needfull) {
	my ($name, $version) = $module =~ /(.+?)\s(.+)?$/;
	$name ||= $module;

	# Extract module name, replacing hyphens with `::` and removing extensions
	$name =~ s{.+/}{};	# Remove path if present
	$name =~ s{-}{::}g;	# Convert hyphens to `::`
	$name =~ s{\.tar\.gz$}{}; # Remove file extension
	$name =~ s{::(\d+)$}{ $1}; # Adjust version formatting if embedded in module name

	if($version) {
		eval "require $name $version" or die $@;
	} else {
		eval "require $name" or die $@;
	}
	$name->import();

	# Uncomment to check version if needed
	die "$name: need $version, got ", $name->VERSION if $version && $name->VERSION < $version;
}

use Mojo::JSON qw(encode_json);
use Time::HiRes qw(time);
use autodie qw(:all);

my $LATENCY_THRESHOLD_MS = 2000;	# slow if > 2000ms
my $FAILURE_ALERTS = 1;	# alert on HTTP failure
my $ALERT_COOLDOWN_SECS = 600;	# 10 minutes
my %last_alerts;	# key => timestamp

my $conn_cache = LWP::ConnCache->new();
my $log;
my %responses;	# for collecting responses

# Log to a file for errors
sub log_error
{
	my ($url, $status, $message) = @_;

	if($log) {
		$log->warn("$url - $status - $message");
	} else {
		my $log_file = 'server_status.log';
		my $timestamp = localtime();
		open my $log_fh, '>>', $log_file or die "Cannot open log file: $!";
		print $log_fh "$timestamp - $status - $url - $message\n";
		close $log_fh;
	}
}

# Read server list from config file
sub load_config
{
	my $rc;

	if(my $config = Config::Abstraction->new(no_fixate => 1)) {
		$rc->{status_icons} = $config->get('status.icons') || {
			ok => decode_entities('&#x1F7E2;'),	# Green blob
			error => decode_entities('&#x1F7E1;'),	# Yellow blob
			unreachable => decode_entities('&#x1F534;')	# Red blob
		};
		$rc->{max_processes} = $config->get('maxprocesses') || 5;
		$rc->{'config'} = $config;
		if(my $logger = $config->get('logger') || $config->get('global.logger')) {
			$log = Log::Abstraction->new($logger);
			$rc->{'servers'} = $config->get('servers');
		}
	} else {
		$rc->{max_processes} = 5;
		$rc->{'servers'} = [
			{
				'url' => 'https://www.google.com',
				'group' => 'Production'
			}
		];
		$rc->{status_icons} = {
			ok => decode_entities('&#x1F7E2;'),	# Green blob
			error => decode_entities('&#x1F7E1;'),	# Yellow blob
			unreachable => decode_entities('&#x1F534;')	# Red blob
		}
	}
	return $rc;
}

sub send_email_alert
{
	my($config, $subject, $body) = @_;

	if(open(my $pout, '|-', '/usr/sbin/sendmail -t')) {
		binmode($pout, ':utf8');
		my $from = ($config && $config->get('alert.from')) || 'monitor@nigelhorne.com';
		my $to = ($config && $config->get('alert.to')) || 'alerts@nigelhorne.com';

		print $pout "To: $to\nFrom: $from\n",
			"Subject: $subject\n\n$body\n";
	}
}

sub should_alert {
	my ($key, $now) = @_;
	return 1 if !exists $last_alerts{$key};
	return ($now - $last_alerts{$key}) > $ALERT_COOLDOWN_SECS;
}

sub cleanup_old_alerts {
	my $now = time;
	for my $key (keys %last_alerts) {
		delete $last_alerts{$key} if ($now - $last_alerts{$key}) > 3600; # 1 hour
	}
}

Mojo::IOLoop->recurring(600 => \&cleanup_old_alerts);

# HTML dashboard
get '/' => sub {
	my $c = shift;
	my $filter = $c->param('filter') || 'all';	# all, ok, error
	my $group_filter = $c->param('group') || 'all';	# Filter by server group

	# data structure retrieval and handling
	my $ua = LWP::UserAgent->new(timeout => 5);
	$ua->conn_cache($conn_cache);
	$ua->env_proxy(1);
	# $ua->agent($useragentname);
	# $ua->from($me);
	my $config = load_config();
	my @servers = @{$config->{'servers'}};
	my $max_processes = $config->{'max_processes'};

	my $pm = Parallel::ForkManager->new((scalar(@servers) > $max_processes) ? $max_processes : scalar(@servers));	# using the system temp dir File::Temp::tempdir()

	$pm->run_on_finish (
		sub {
			my ($pid, $exit_code, $url, $exit_signal, $core_dump, $response) = @_;

			# see what the child sent us, if anything
			if(defined($response)) {	# test rather than assume child sent anything
				$responses{$response->{'url'}} = $response;
			# } else {
				# log_error($url, 'Unreachable', $res->status_line());
			}
		}
	);

	foreach my $url (@servers) {
		$pm->start($url->{'url'}) and next;

		my $response;
		my $start = time;
		eval {
			$response = $ua->get($url->{'url'});
		};
		my $latency = int(1000 * (time - $start));	# in ms

		if($response) {
			$pm->finish(0, {
				url => $url->{'url'},
				response => $response,
				latency => $latency
			});
		} else {
			$pm->finish(1, {
				url => $url->{'url'},
				latency => $latency
			});
		}
	}

	$pm->wait_all_children();

	my(@statuses, @alerts);
	foreach my $url (@servers) {
	        next if $group_filter ne 'all' && $url->{group} ne $group_filter;

		my $group = $url->{'group'};
		$url = $url->{'url'};

		my ($res, $status, $color, $code, $icon, $latency, $tooltip);

		my $start = time;
		$res = $responses{$url}->{'response'};
		$latency = $responses{$url}->{'latency'};

		my $favicon_url = '';
		# Fallback if no icon found
		if (!$favicon_url) {
			($favicon_url = $url) =~ s{^(https?://[^/]+).*}{$1/favicon.ico};
		}
		my %status_colors = (
			ok => 'green',
			error => 'orange',
			unreachable => 'red',
		);

		if(($res->code == 500 && $res->decoded_content =~ /Can't connect|Name or service not known|timed out/i)) {
			$status = 'Unreachable';
			$code = '';
			$tooltip = $@ || ($res ? $res->status_line : 'No response');

			log_error($url, 'Unreachable', $tooltip);

			if($FAILURE_ALERTS) {
				my $key = "DOWN:$url";

				if (should_alert($key, $start)) {
					push @alerts, "❌ $url is DOWN";
					$last_alerts{$key} = $start;
				}
			}
		} elsif ($res->is_success) {
			$status = 'OK';
			$code = $res->code();
			$tooltip = $res->status_line();

			if($res && $res->is_success) {
				my $tree = HTML::TreeBuilder::XPath->new;
				$tree->parse($res->decoded_content);
				my ($icon_node) = $tree->findnodes('//link[contains(translate(@rel, "ICON", "icon"), "icon")][@href]');
				if ($icon_node) {
					my $href = $icon_node->attr('href');
					my $base = URI->new($url);
					$favicon_url = URI->new_abs($href, $base)->as_string();
				}
				$tree->delete();
			}
			if($latency > $LATENCY_THRESHOLD_MS) {
				my $key = "SLOW:$url";

				if (should_alert($key, $start)) {
					push @alerts, "⚠️ $url is slow: ${latency}ms";
					$last_alerts{$key} = $start;
				}
			}
		} else {
			$status = 'Error';
			$icon = decode_entities('&#x1F7E1;');	# Yellow blob
			$code = $res->code;
			$tooltip = $res->status_line;
			log_error($url, 'HTTP Error', $tooltip);
			if($latency > $LATENCY_THRESHOLD_MS) {
				my $key = "SLOW:$url";

				if (should_alert($key, $start)) {
					push @alerts, "⚠️ $url is slow: ${latency}ms";
					$last_alerts{$key} = $start;
				}
			}

		}

		$color = $status_colors{lc($status)};
		$config->{'status_icons'}->{lc($status)} or die "Add $status to status_icons";
		$icon = decode_entities($config->{'status_icons'}->{lc($status)});

		my $time_color = $latency < 500 ? 'green'
						: $latency < 1000 ? 'orange'
						: 'red';

		state %history;

		push @{$history{$url}}, $latency;
		splice @{$history{$url}}, 0, -20 if @{$history{$url}} > 20;
		# $history = [ @$history[-20..-1] ] if @$history > 20;

		push @statuses, {
			url => $url,
			group => $group,
			status => $status,
			color => $color,
			code => $code,
			icon => $icon,
			latency => $latency,
			time_color => $time_color,
			tooltip => $tooltip,
			favicon => $favicon_url,
			history => $history{$url},
		};
	}

	# Apply filter
	if ($filter eq 'ok') {
		@statuses = grep { $_->{color} eq 'green' } @statuses;
	} elsif ($filter eq 'error') {
		@statuses = grep { $_->{color} ne 'green' } @statuses;
	}

	$c->stash(
	    statuses => \@statuses,
	    filter => $filter,
	    encode_json => \&encode_json,
	    group_filter => $group_filter
	);

	$c->render(template => 'dashboard');

	if(scalar(@alerts)) {
		send_email_alert($config->{'config'}, 'Site Alert: ' . scalar(@alerts) . ' issues', join("\n", @alerts));
	}
};

# JSON API endpoint
get '/api/status' => sub {
	my $c = shift;

	$c->render(json => {
		timestamp => time,
		results => \%responses
	});
};

app->start();

__DATA__

@@ dashboard.html.ep
% layout 'default';
% title 'Web Server Dashboard';
<h1>Web Server Status</h1>
<p><em>Auto-refreshes every 60 seconds</em></p>

<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1em;">
  <div>
    <label for="filter">Filter:</label>
    <select id="filter" onchange="applyFilter()">
      <option value="all">All</option>
      <option value="green">Healthy</option>
      <option value="yellow">Warning</option>
      <option value="red">Error</option>
    </select>
    <label for="group-filter">Group:</label>
    <select id="group-filter" onchange="applyGroupFilter()">
        <option value="all" <%= 'selected' if $group_filter eq 'all' %>>All</option>
        <option value="Production" <%= 'selected' if $group_filter eq 'Production' %>>Production</option>
        <option value="Development" <%= 'selected' if $group_filter eq 'Development' %>>Development</option>
    </select>
  <div>
</div>

  </div>
  <div style="display: flex; gap: 0.5em;">
    <button onclick="refreshPage()">Refresh</button>
    <button onclick="exportTable()">Export</button>
    <button onclick="resetOrder()">Reset Column Order</button>
  </div>
</div>

<table id="dashboard-table" border="1" cellpadding="6" cellspacing="0">
  <thead>
    <tr id="columns-row">
      <th data-column="url" draggable="true">Server</th>
      <th data-column="group" draggable="true">Group</th>
      <th data-column="status" draggable="true">Status</th>
      <th data-column="code" draggable="true">HTTP Code</th>
      <th data-column="latency" draggable="true">Response Time</th>
      <th data-column="chart" draggable="true">Latency Chart</th>
    </tr>
  </thead>
  <tbody>
    % my $i = 0;
    % for my $s (@$statuses) {
      <tr>
        <td>
		<a href="<%= $s->{url} %>" target="_blank"><img src="<%= $s->{favicon} %>" height="16" width="16"></a>
		<a href="<%= $s->{url} %>" target="_blank"><%= $s->{url} %></a>
	</td>
	<td><%= $s->{group} %></td>
<td style="color:<%= $s->{color} %>;" class="compact-latency" title="<%= $s->{tooltip} // '' %>">
  <b><%= $s->{icon} %> <%= $s->{status} %></b>
</td>

        <td><%= $s->{code} || '-' %></td>
	<td style="color:<%= $s->{time_color} %>;" class="compact-latency"><%= $s->{latency} %> ms</td>
        <td>
          <canvas class="latency-chart" id="chart-<%= $i %>" width="100" height="30"></canvas>
<script>
  const ctx<%= $i %> = document.getElementById('chart-<%= $i %>').getContext('2d');
  new Chart(ctx<%= $i %>, {
    type: 'line',
    data: {
      labels: [...Array(<%= scalar(@{$s->{history} // []}) %>).keys()],
      datasets: [{
	data: <%= $encode_json->($s->{history} || []) %>,
        borderColor: 'blue',
        backgroundColor: 'rgba(0,0,255,0.1)',
        fill: true,
        tension: 0.3,
      }]
    },
    options: {
      scales: { x: { display: false }, y: { display: false } },
      plugins: { legend: { display: false } }
    }
  });
function applyGroupFilter() {
    const filter = document.getElementById('group-filter').value;
    window.location.href = `/?group=${filter}`;
}

</script>
        </td>
      </tr>
    % $i++;
    % }
  </tbody>
</table>
<!-- Enable this code to see a separate latencyChart
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<canvas id="latencyChart"></canvas>
<script>
async function fetchAndDraw() {
  const res = await fetch('/api/status');
  const json = await res.json();
  console.log(json);

  const dataArr = Object.entries(json.results).map(([url, info]) => ({
    name: url,
    latency: info.latency
  }));

  const labels = dataArr.map(x => x.name);
  const data = dataArr.map(x => x.latency);

  new Chart(document.getElementById('latencyChart'), {
    type: 'bar',
    data: {
      labels: labels,
      datasets: [{
        label: 'Latency (ms)',
        data: data,
        backgroundColor: 'rgba(54, 162, 235, 0.7)'
      }]
    },
    options: {
      scales: {
        y: { beginAtZero: true }
      }
    }
  });
}

fetchAndDraw();
</script>
-->

<script>
	// Make sure that the server column is wide enough
	window.addEventListener('DOMContentLoaded', () => {
		const table = document.getElementById('dashboard-table');
		const colIndex = Array.from(table.rows[0].cells).findIndex(cell => cell.dataset.column === 'url');
		let maxLength = 0;

		for (let row of table.tBodies[0].rows) {
			const cellText = row.cells[colIndex].innerText;
			if (cellText.length > maxLength) maxLength = cellText.length;
		}

		const pxPerChar = 8; // average character width
		const padding = 20;  // extra room for padding
		const minWidth = Math.max(150, (maxLength * pxPerChar) + padding);

		table.rows[0].cells[colIndex].style.minWidth = `${minWidth}px`;
	});
</script>

@@ layouts/default.html.ep
<!DOCTYPE html>
<html>
  <head>
	<title><%= title %></title>
	<meta http-equiv="refresh" content="60">
<style>
  body { font-family: sans-serif; padding: 20px; }
  table { border-collapse: collapse; width: 100%; }
  th, td { padding: 6px 12px; text-align: left; }
  th { background: #f0f0f0; }
  a { text-decoration: none; color: blue; }
  select { margin: 8px; padding: 4px; }

  .compact-latency {
    max-height: 2.4em; /* roughly 2 lines */
    overflow: hidden;
    line-height: 1.2em;
    white-space: normal;
  }
.latency-chart {
  height: 30px;
  max-height: 3.6em;
}
	</style>
	<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  </head>
  <body>
  <%= content %>
<script>
function resetOrder() {
  localStorage.removeItem('columnOrder');
  location.reload();
}

function refreshPage() {
  location.reload();
}

function exportTable() {
  const rows = document.querySelectorAll("#dashboard-table tr");
  let csv = "";
  rows.forEach(row => {
    let cols = [...row.children].map(td => "${td.textContent.trim()}");
    csv += cols.join(",") + "\n";
  });

  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = "server_status_export.csv";
  link.click();
}

document.addEventListener('DOMContentLoaded', () => {
  const table = document.getElementById('dashboard-table');
  const headerRow = table.querySelector('thead tr');
  const bodyRows = [...table.querySelectorAll('tbody tr')];
  const storageKey = 'columnOrder';
  const sortKey = 'columnSort';

  // Save current column order to localStorage
  function saveOrder() {
    const order = [...headerRow.children].map(th => th.textContent.trim());
    localStorage.setItem(storageKey, JSON.stringify(order));
  }

  // Restore column order from localStorage
  function restoreOrder() {
    const saved = JSON.parse(localStorage.getItem(storageKey) || '[]');
    if (!saved.length) return;

    const currentHeaders = [...headerRow.children];
    const newOrder = [];

    saved.forEach(name => {
      const match = currentHeaders.find(th => th.textContent.trim() === name);
      if (match) newOrder.push(match);
    });

    newOrder.forEach(th => headerRow.appendChild(th));

    bodyRows.forEach(row => {
      const cells = [...row.children];
      const newCells = [];

      saved.forEach((name, i) => {
        const idx = currentHeaders.findIndex(th => th.textContent.trim() === name);
        if (idx > -1) newCells.push(cells[idx]);
      });

      newCells.forEach(cell => row.appendChild(cell));
    });
  }

  // Drag and drop behavior
  let draggedIndex;

  headerRow.addEventListener('dragstart', (e) => {
    draggedIndex = [...headerRow.children].indexOf(e.target);
  });

  headerRow.addEventListener('dragover', (e) => {
    e.preventDefault();
  });

  headerRow.addEventListener('drop', (e) => {
    e.preventDefault();
    const targetIndex = [...headerRow.children].indexOf(e.target);
    if (draggedIndex === targetIndex) return;

    // Move header
    headerRow.insertBefore(
      headerRow.children[draggedIndex],
      headerRow.children[targetIndex + (draggedIndex < targetIndex ? 1 : 0)]
    );

    // Move each row's cells
    bodyRows.forEach(row => {
      const cells = row.children;
      row.insertBefore(
        cells[draggedIndex],
        cells[targetIndex + (draggedIndex < targetIndex ? 1 : 0)]
      );
    });

    saveOrder(); // Save new order
  });

  restoreOrder(); // Apply saved order on load

  // Save sort settings
  function saveSort(column, direction) {
    localStorage.setItem(sortKey, JSON.stringify({ column, direction }));
  }

  // Restore sort settings
  function restoreSort() {
    const saved = JSON.parse(localStorage.getItem(sortKey) || '{}');
    if (saved.column) {
      applySort(saved.column, saved.direction, false);
    }
  }

function applySort(column, direction = 'asc', save = true) {
  const colIndex = [...headerRow.children].findIndex(th => th.dataset.column === column);
  if (colIndex === -1) return;

  // Reset all sort indicators
  headerRow.querySelectorAll('th').forEach(th => {
    const base = th.dataset.label || th.textContent.replace(/ ↑| ↓/, '').trim();
    th.textContent = base;
    th.dataset.label = base;
  });

  // Add arrow to sorted column
  const sortedTh = headerRow.children[colIndex];
  // &ShortUpArrow; &ShortDownArrow;
  sortedTh.textContent = (sortedTh.dataset.label || sortedTh.textContent.trim()) + (direction === 'asc' ? ' ↑' : ' ↓');

  // Sort rows
  const rows = [...table.querySelectorAll('tbody tr')];
  rows.sort((a, b) => {
    const aText = a.children[colIndex].textContent.trim();
    const bText = b.children[colIndex].textContent.trim();
    const aVal = isNaN(aText) ? aText.toLowerCase() : parseFloat(aText);
    const bVal = isNaN(bText) ? bText.toLowerCase() : parseFloat(bText);
    return direction === 'asc' ? (aVal > bVal ? 1 : -1) : (aVal < bVal ? 1 : -1);
  });

  const tbody = table.querySelector('tbody');
  rows.forEach(row => tbody.appendChild(row));

  if (save) saveSort(column, direction);
}

  // Sort toggle click handler
  headerRow.querySelectorAll('th').forEach(th => {
    th.addEventListener('click', (e) => {
      // if (e.target.draggable) return; // Skip drag

      const column = th.dataset.column;
      const current = JSON.parse(localStorage.getItem(sortKey) || '{}');
      const newDirection = (current.column === column && current.direction === 'asc') ? 'desc' : 'asc';
      applySort(column, newDirection);
    });
  });

  restoreOrder(); // existing
  restoreSort();  // new
  checkForStatusChanges();
});

function checkForStatusChanges() {
  const rows = document.querySelectorAll('#dashboard-table tbody tr');
  rows.forEach(row => {
    const serverUrl = row.children[0].innerText.trim();
    const statusCell = row.children[2];
    const color = statusCell.style.color;

    const prevColor = localStorage.getItem(`status-${serverUrl}`);
    if (color === 'red' && prevColor !== 'red') {
      // showNotification(`Alert: ${serverUrl} is now DOWN`);
      notifyStatusRed(`${serverUrl}`);
    }

    localStorage.setItem(`status-${serverUrl}`, color);
  });
}

function notifyStatusRed(url) {
  if (Notification.permission === "granted") {
    new Notification("⚠ Server Alert", {
      body: `Status changed to RED for: ${url}`,
      icon: "https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/Warning_icon.svg/1024px-Warning_icon.svg.png"
    });
  }
}

			document.addEventListener("DOMContentLoaded", () => {
				if (Notification && Notification.permission !== "granted") {
					Notification.requestPermission();
				}
				checkForStatusChanges();
			});

			function showNotification(message) {
				if (Notification.permission === "granted") {
					new Notification(message);
				}
			}

		</script>
	</body>
</html>
